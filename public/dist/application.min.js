"use strict";var ApplicationConfiguration=function(){var applicationModuleName="osha",applicationModuleVendorDependencies=["ngResource","ngCookies","ngAnimate","ngTouch","ngSanitize","ui.router","ui.bootstrap","ui.utils"],registerModule=function(moduleName,dependencies){angular.module(moduleName,dependencies||[]),angular.module(applicationModuleName).requires.push(moduleName)};return{applicationModuleName:applicationModuleName,applicationModuleVendorDependencies:applicationModuleVendorDependencies,registerModule:registerModule}}();angular.module(ApplicationConfiguration.applicationModuleName,ApplicationConfiguration.applicationModuleVendorDependencies),angular.module(ApplicationConfiguration.applicationModuleName).config(["$locationProvider",function($locationProvider){$locationProvider.hashPrefix("!")}]),angular.element(document).ready(function(){"#_=_"===window.location.hash&&(window.location.hash="#!"),angular.bootstrap(document,[ApplicationConfiguration.applicationModuleName])}),ApplicationConfiguration.registerModule("car-models"),ApplicationConfiguration.registerModule("core"),ApplicationConfiguration.registerModule("users"),ApplicationConfiguration.registerModule("vehicle-models"),ApplicationConfiguration.registerModule("vehicles"),angular.module("car-models").run(["Menus",function(Menus){Menus.addMenuItem("topbar","Car models","car-models","dropdown","/car-models(/create)?"),Menus.addSubMenuItem("topbar","car-models","List Car models","car-models"),Menus.addSubMenuItem("topbar","car-models","New Car model","car-models/create")}]),angular.module("car-models").config(["$stateProvider",function($stateProvider){$stateProvider.state("listCarModels",{url:"/car-models",templateUrl:"modules/car-models/views/list-car-models.client.view.html"}).state("createCarModel",{url:"/car-models/create",templateUrl:"modules/car-models/views/create-car-model.client.view.html"}).state("viewCarModel",{url:"/car-models/:carModelId",templateUrl:"modules/car-models/views/view-car-model.client.view.html"}).state("editCarModel",{url:"/car-models/:carModelId/edit",templateUrl:"modules/car-models/views/edit-car-model.client.view.html"})}]),angular.module("car-models").controller("CarModelsController",["$scope","$stateParams","$location","Authentication","CarModels",function($scope,$stateParams,$location,Authentication,CarModels){$scope.authentication=Authentication,$scope.create=function(){var carModel=new CarModels({name:this.name});carModel.$save(function(response){$location.path("car-models/"+response._id),$scope.name=""},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.remove=function(carModel){if(carModel){carModel.$remove();for(var i in $scope.carModels)$scope.carModels[i]===carModel&&$scope.carModels.splice(i,1)}else $scope.carModel.$remove(function(){$location.path("car-models")})},$scope.update=function(){var carModel=$scope.carModel;carModel.$update(function(){$location.path("car-models/"+carModel._id)},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.find=function(){$scope.carModels=CarModels.query()},$scope.findOne=function(){$scope.carModel=CarModels.get({carModelId:$stateParams.carModelId})}}]),angular.module("car-models").factory("CarModels",["$resource",function($resource){return $resource("car-models/:carModelId",{carModelId:"@_id"},{update:{method:"PUT"}})}]),angular.module("core").config(["$stateProvider","$urlRouterProvider",function($stateProvider,$urlRouterProvider){$urlRouterProvider.otherwise("/"),$stateProvider.state("home",{url:"/",templateUrl:"modules/core/views/home.client.view.html"})}]),angular.module("core").controller("HeaderController",["$scope","Authentication","Menus",function($scope,Authentication,Menus){$scope.authentication=Authentication,$scope.isCollapsed=!1,$scope.menu=Menus.getMenu("topbar"),$scope.toggleCollapsibleMenu=function(){$scope.isCollapsed=!$scope.isCollapsed},$scope.$on("$stateChangeSuccess",function(){$scope.isCollapsed=!1})}]),angular.module("core").controller("HomeController",["$scope","Authentication",function($scope,Authentication){$scope.authentication=Authentication}]),angular.module("core").service("Menus",[function(){this.defaultRoles=["*"],this.menus={};var shouldRender=function(user){if(!user)return this.isPublic;if(~this.roles.indexOf("*"))return!0;for(var userRoleIndex in user.roles)for(var roleIndex in this.roles)if(this.roles[roleIndex]===user.roles[userRoleIndex])return!0;return!1};this.validateMenuExistance=function(menuId){if(menuId&&menuId.length){if(this.menus[menuId])return!0;throw new Error("Menu does not exists")}throw new Error("MenuId was not provided")},this.getMenu=function(menuId){return this.validateMenuExistance(menuId),this.menus[menuId]},this.addMenu=function(menuId,isPublic,roles){return this.menus[menuId]={isPublic:isPublic||!1,roles:roles||this.defaultRoles,items:[],shouldRender:shouldRender},this.menus[menuId]},this.removeMenu=function(menuId){this.validateMenuExistance(menuId),delete this.menus[menuId]},this.addMenuItem=function(menuId,menuItemTitle,menuItemURL,menuItemType,menuItemUIRoute,isPublic,roles,position){return this.validateMenuExistance(menuId),this.menus[menuId].items.push({title:menuItemTitle,link:menuItemURL,menuItemType:menuItemType||"item",menuItemClass:menuItemType,uiRoute:menuItemUIRoute||"/"+menuItemURL,isPublic:null===isPublic||"undefined"==typeof isPublic?this.menus[menuId].isPublic:isPublic,roles:null===roles||"undefined"==typeof roles?this.menus[menuId].roles:roles,position:position||0,items:[],shouldRender:shouldRender}),this.menus[menuId]},this.addSubMenuItem=function(menuId,rootMenuItemURL,menuItemTitle,menuItemURL,menuItemUIRoute,isPublic,roles,position){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)this.menus[menuId].items[itemIndex].link===rootMenuItemURL&&this.menus[menuId].items[itemIndex].items.push({title:menuItemTitle,link:menuItemURL,uiRoute:menuItemUIRoute||"/"+menuItemURL,isPublic:null===isPublic||"undefined"==typeof isPublic?this.menus[menuId].items[itemIndex].isPublic:isPublic,roles:null===roles||"undefined"==typeof roles?this.menus[menuId].items[itemIndex].roles:roles,position:position||0,shouldRender:shouldRender});return this.menus[menuId]},this.removeMenuItem=function(menuId,menuItemURL){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)this.menus[menuId].items[itemIndex].link===menuItemURL&&this.menus[menuId].items.splice(itemIndex,1);return this.menus[menuId]},this.removeSubMenuItem=function(menuId,submenuItemURL){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)for(var subitemIndex in this.menus[menuId].items[itemIndex].items)this.menus[menuId].items[itemIndex].items[subitemIndex].link===submenuItemURL&&this.menus[menuId].items[itemIndex].items.splice(subitemIndex,1);return this.menus[menuId]},this.addMenu("topbar")}]),angular.module("users").config(["$httpProvider",function($httpProvider){$httpProvider.interceptors.push(["$q","$location","Authentication",function($q,$location,Authentication){return{responseError:function(rejection){switch(rejection.status){case 401:Authentication.user=null,$location.path("signin");break;case 403:}return $q.reject(rejection)}}}])}]),angular.module("users").config(["$stateProvider",function($stateProvider){$stateProvider.state("profile",{url:"/settings/profile",templateUrl:"modules/users/views/settings/edit-profile.client.view.html"}).state("password",{url:"/settings/password",templateUrl:"modules/users/views/settings/change-password.client.view.html"}).state("accounts",{url:"/settings/accounts",templateUrl:"modules/users/views/settings/social-accounts.client.view.html"}).state("signup",{url:"/signup",templateUrl:"modules/users/views/authentication/signup.client.view.html"}).state("signin",{url:"/signin",templateUrl:"modules/users/views/authentication/signin.client.view.html"}).state("forgot",{url:"/password/forgot",templateUrl:"modules/users/views/password/forgot-password.client.view.html"}).state("reset-invalid",{url:"/password/reset/invalid",templateUrl:"modules/users/views/password/reset-password-invalid.client.view.html"}).state("reset-success",{url:"/password/reset/success",templateUrl:"modules/users/views/password/reset-password-success.client.view.html"}).state("reset",{url:"/password/reset/:token",templateUrl:"modules/users/views/password/reset-password.client.view.html"})}]),angular.module("users").controller("AuthenticationController",["$scope","$http","$location","Authentication",function($scope,$http,$location,Authentication){$scope.authentication=Authentication,$scope.authentication.user&&$location.path("/"),$scope.signup=function(){$http.post("/auth/signup",$scope.credentials).success(function(response){$scope.authentication.user=response,$location.path("/")}).error(function(response){$scope.error=response.message})},$scope.signin=function(){$http.post("/auth/signin",$scope.credentials).success(function(response){$scope.authentication.user=response,$location.path("/")}).error(function(response){$scope.error=response.message})}}]),angular.module("users").controller("PasswordController",["$scope","$stateParams","$http","$location","Authentication",function($scope,$stateParams,$http,$location,Authentication){$scope.authentication=Authentication,$scope.authentication.user&&$location.path("/"),$scope.askForPasswordReset=function(){$scope.success=$scope.error=null,$http.post("/auth/forgot",$scope.credentials).success(function(response){$scope.credentials=null,$scope.success=response.message}).error(function(response){$scope.credentials=null,$scope.error=response.message})},$scope.resetUserPassword=function(){$scope.success=$scope.error=null,$http.post("/auth/reset/"+$stateParams.token,$scope.passwordDetails).success(function(response){$scope.passwordDetails=null,Authentication.user=response,$location.path("/password/reset/success")}).error(function(response){$scope.error=response.message})}}]),angular.module("users").controller("SettingsController",["$scope","$http","$location","Users","Authentication",function($scope,$http,$location,Users,Authentication){$scope.user=Authentication.user,$scope.user||$location.path("/"),$scope.hasConnectedAdditionalSocialAccounts=function(provider){for(var i in $scope.user.additionalProvidersData)return!0;return!1},$scope.isConnectedSocialAccount=function(provider){return $scope.user.provider===provider||$scope.user.additionalProvidersData&&$scope.user.additionalProvidersData[provider]},$scope.removeUserSocialAccount=function(provider){$scope.success=$scope.error=null,$http["delete"]("/users/accounts",{params:{provider:provider}}).success(function(response){$scope.success=!0,$scope.user=Authentication.user=response}).error(function(response){$scope.error=response.message})},$scope.updateUserProfile=function(isValid){if(isValid){$scope.success=$scope.error=null;var user=new Users($scope.user);user.$update(function(response){$scope.success=!0,Authentication.user=response},function(response){$scope.error=response.data.message})}else $scope.submitted=!0},$scope.changeUserPassword=function(){$scope.success=$scope.error=null,$http.post("/users/password",$scope.passwordDetails).success(function(response){$scope.success=!0,$scope.passwordDetails=null}).error(function(response){$scope.error=response.message})}}]),angular.module("users").factory("Authentication",[function(){var _this=this;return _this._data={user:window.user},_this._data}]),angular.module("users").factory("Users",["$resource",function($resource){return $resource("users",{},{update:{method:"PUT"}})}]),angular.module("vehicle-models").run(["Menus",function(Menus){Menus.addMenuItem("topbar","Vehicle models","vehicle-models","dropdown","/vehicle-models(/create)?"),Menus.addSubMenuItem("topbar","vehicle-models","List Vehicle models","vehicle-models"),Menus.addSubMenuItem("topbar","vehicle-models","New Vehicle model","vehicle-models/create")}]),angular.module("vehicle-models").config(["$stateProvider",function($stateProvider){$stateProvider.state("listVehicleModels",{url:"/vehicle-models",templateUrl:"modules/vehicle-models/views/list-vehicle-models.client.view.html"}).state("createVehicleModel",{url:"/vehicle-models/create",templateUrl:"modules/vehicle-models/views/create-vehicle-model.client.view.html"}).state("viewVehicleModel",{url:"/vehicle-models/:vehicleModelId",templateUrl:"modules/vehicle-models/views/view-vehicle-model.client.view.html"}).state("editVehicleModel",{url:"/vehicle-models/:vehicleModelId/edit",templateUrl:"modules/vehicle-models/views/edit-vehicle-model.client.view.html"})}]),angular.module("vehicle-models").controller("VehicleModelsController",["$scope","$stateParams","$location","Authentication","VehicleModels",function($scope,$stateParams,$location,Authentication,VehicleModels){$scope.authentication=Authentication,$scope.create=function(){var vehicleModel=new VehicleModels({name:this.name,tasks:this.tasks});vehicleModel.$save(function(response){$location.path("vehicle-models/"+response._id),$scope.name="",$scope.tasks=[]},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.remove=function(vehicleModel){if(vehicleModel){vehicleModel.$remove();for(var i in $scope.vehicleModels)$scope.vehicleModels[i]===vehicleModel&&$scope.vehicleModels.splice(i,1)}else $scope.vehicleModel.$remove(function(){$location.path("vehicle-models")})},$scope.update=function(){var vehicleModel=$scope.vehicleModel;vehicleModel.$update(function(){$location.path("vehicle-models/"+vehicleModel._id)},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.find=function(){$scope.vehicleModels=VehicleModels.query()},$scope.findOne=function(){$scope.vehicleModel=VehicleModels.get({vehicleModelId:$stateParams.vehicleModelId})}}]),angular.module("vehicle-models").factory("VehicleModels",["$resource",function($resource){return $resource("vehicle-models/:vehicleModelId",{vehicleModelId:"@_id"},{update:{method:"PUT"}})}]),angular.module("vehicles").run(["Menus",function(Menus){Menus.addMenuItem("topbar","Vehicles","vehicles","dropdown","/vehicles(/create)?"),Menus.addSubMenuItem("topbar","vehicles","List Vehicles","vehicles"),Menus.addSubMenuItem("topbar","vehicles","New Vehicle","vehicles/create")}]),angular.module("vehicles").config(["$stateProvider",function($stateProvider){$stateProvider.state("listVehicles",{url:"/vehicles",templateUrl:"modules/vehicles/views/list-vehicles.client.view.html"}).state("createVehicle",{url:"/vehicles/create",templateUrl:"modules/vehicles/views/create-vehicle.client.view.html"}).state("viewVehicle",{url:"/vehicles/:vehicleId",templateUrl:"modules/vehicles/views/view-vehicle.client.view.html"}).state("editVehicle",{url:"/vehicles/:vehicleId/edit",templateUrl:"modules/vehicles/views/edit-vehicle.client.view.html"})}]),angular.module("vehicles").controller("VehiclesController",["$scope","$stateParams","$location","Authentication","Vehicles",function($scope,$stateParams,$location,Authentication,Vehicles){$scope.authentication=Authentication,$scope.create=function(){var vehicle=new Vehicles({name:this.name,vim:this.vim});vehicle.$save(function(response){$location.path("vehicles"),$scope.name="",$scope.vim=""},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.remove=function(vehicle){if(vehicle){vehicle.$remove();for(var i in $scope.vehicles)$scope.vehicles[i]===vehicle&&$scope.vehicles.splice(i,1)}else $scope.vehicle.$remove(function(){$location.path("vehicles")})},$scope.update=function(){var vehicle=$scope.vehicle;vehicle.$update(function(){$location.path("vehicles/"+vehicle._id)},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.find=function(){$scope.vehicles=Vehicles.query()},$scope.findOne=function(){$scope.vehicle=Vehicles.get({vehicleId:$stateParams.vehicleId})}}]),angular.module("vehicles").factory("Vehicles",["$resource",function($resource){return $resource("vehicles/:vehicleId",{vehicleId:"@_id"},{update:{method:"PUT"}})}]);